OUTPUT_DIR := ./output
IMAGE := HelloWorld.elf

# The directory that contains the /source and /demo sub directories.
FREERTOS_ROOT = ./../../../..

CC = riscv64-unknown-elf-gcc
LD = riscv64-unknown-elf-gcc
SIZE = riscv64-unknown-elf-size
MAKE = make


CFLAGS +=  -c -g -O0 -DENABLE_STDLIB_H -DENABLE_NR_SHELL -DENABLE_TLSF -DENABLE_GCOV -DENABLE_KERNEL_TEST -D__riscv_float_abi_soft  -c  -coverage -mabi=ilp32 -mcmodel=medlow -Wall -fmessage-length=0 -ffunction-sections -fdata-sections -fno-builtin-printf 

LDFLAGS += --coverage -nostartfiles -Xlinker --gc-sections -Wl,-Map,$(OUTPUT_DIR)/HelloWorld.map \
           -T./rom.ld -mabi=ilp32 -mcmodel=medlow -Xlinker \
           --defsym=__stack_size=1024 -Wl,--start-group -Wl,--end-group 


# Generate GCC_VERSION in number format
GCC_VERSION = $(shell $(CC) -dumpversion | sed 's/^.* //g' | awk -F. '{ printf("%d%02d%02d"), $$1, $$2, $$3 }')
GCC_VERSION_NEED_ZICSR = "110100"

ifeq ($(shell test $(GCC_VERSION) -ge $(GCC_VERSION_NEED_ZICSR) && echo true),true)
    CFLAGS += -march=rv32imac_zicsr
    LDFLAGS += -march=rv32imac_zicsr
else
    CFLAGS += -march=rv32imac
    LDFLAGS += -march=rv32imac
endif

VPATH += ./
INCLUDE_DIRS += -I./
SOURCE_FILES += ./main.c 
SOURCE_FILES += ./gcov_public.c 
SOURCE_FILES += ./gcov_gcc.c 
SOURCE_FILES += ./gcov_printf.c
ASM_SOURCE_FILES += ./start.S
ASM_SOURCE_FILES += ./vector.S

#Create a list of object files with the desired output directory path.
OBJS = $(SOURCE_FILES:%.c=%.o) $(ASM_SOURCE_FILES:%.S=%.o)
OBJS_NO_PATH = $(notdir $(OBJS))
OBJS_OUTPUT = $(OBJS_NO_PATH:%.o=$(OUTPUT_DIR)/%.o)

#Create a list of dependency files with the desired output directory path.
DEP_FILES := $(SOURCE_FILES:%.c=$(OUTPUT_DIR)/%.d) $(ASM_SOURCE_FILES:%.S=$(OUTPUT_DIR)/%.d)
DEP_FILES_NO_PATH = $(notdir $(DEP_FILES))
DEP_OUTPUT = $(DEP_FILES_NO_PATH:%.d=$(OUTPUT_DIR)/%.d)

all: $(OUTPUT_DIR)/$(IMAGE)

%.o : %.c
$(OUTPUT_DIR)/%.o : %.c $(OUTPUT_DIR)/%.d Makefile
	$(CC) $(CFLAGS) -MMD -MP -c $< -o $@

%.o : %.S
$(OUTPUT_DIR)/%.o: %.S $(OUTPUT_DIR)/%.d Makefile
	$(CC) $(CFLAGS) -MMD -MP -c $< -o $@

$(OUTPUT_DIR)/$(IMAGE): $(OBJS_OUTPUT) Makefile
	@echo ""
	@echo ""
	@echo "--- Riscv Demo ---"
	@echo ""
	$(LD) $(OBJS_OUTPUT) $(LDFLAGS) -o $(OUTPUT_DIR)/$(IMAGE)
	$(SIZE) $(OUTPUT_DIR)/$(IMAGE)

$(DEP_OUTPUT):
include $(wildcard $(DEP_OUTPUT))

clean:
	rm -f $(OUTPUT_DIR)/$(IMAGE) $(OUTPUT_DIR)/*.o $(OUTPUT_DIR)/*.d $(OUTPUT_DIR)/*.map $(OUTPUT_DIR)/*.* 
	
qemu:
	qemu-system-riscv32 -machine virt -serial stdio -nodefaults -monitor null -bios none -smp 1 -kernel $(OUTPUT_DIR)/$(IMAGE) -nographic

qemu_remote:
	qemu-system-riscv32 -machine virt -serial stdio -nodefaults -monitor null -bios none -smp 1 -kernel $(OUTPUT_DIR)/$(IMAGE) -nographic -S -s
	
#use "make print-[VARIABLE_NAME] to print the value of a variable generated by
#this makefile.
print-%  : ; @echo $* = $($*)

.PHONY: all clean qemu qemu_remote
